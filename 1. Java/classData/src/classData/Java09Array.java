package classData;

public class Java09Array {
	public static void main(String[] args) {
		/*	5명의 성적의 변수를 저장하는 경우의 예
		int result1, result2, result3, result4, result5;
		result1 = 85;
		result2 = 78;
		result3 = 92;
		result4 = 62;
		result5 = 69;
		System.out.println(result1);
		System.out.println(result2);
		System.out.println(result3);
		System.out.println(result4);
		System.out.println(result5);
		5명이면 쉽지만 50명이면 힘들것이다.
		배열에서는 배열의 변수를 하나 준비합니다. 
		그리고 변수와는 달리 배열에서 값을 저장할 위치를 임의의 수만큼 가질 수 있습니다. 
		전혀 이용 목적이 다른 여러 변수를 배열로 정리하고 관리하는 것은 이해하기 
		어려워집니다만, 유사한 목적의 값을 여러 개로 저장하는 데 이름이 다른 변수를 
		다수 준비하는 경우, 하나의 배열로 정리하고 관리하는 것이 효율적입니다.
		또한 배열의 가장 큰 장점은 연결해서 사용할 수 있는 점입니다. 
		배열에 저장된 값을 순서대로 출력하는 경우는 다음과 같이 작성할 수 있습니다.
		int result[] = new int[5];
		result[0] = 85;
		result[1] = 78;
		result[2] = 92;
		result[3] = 62;
		result[4] = 69;
		for(int i = 0; i < 5 ; i++) {
			System.out.println(result[i]);
		}
		==
		간결하게 기술할 수 있다.
		*/
		int result[] = {85,78,92,62,69};
		for(int i = 0; i < 5 ; i++) {
			System.out.println(result[i]);
		}
		
		/*	배열의 선언
		배열을 사용하려면 배열을 선언해야한다.
		자료형 배열변수이름[];
		변수의 경우와 같이 저장되는 값으 데이터형과 배열을 구별하기 위한
		배열변수이름을 지정한다. 하나의 배열에 같은 데이터형만 저장할 수 있다.
		변수의 경우 선언하는 것만으로 하나의 값을 저장할 장소가 확보된다.
		배열의 경우는 값을 저장할 위치를 필요한 만큼 나중에 확보해야한다.
		장소 확보를 위해 new 연산자를 사용하여야 한다
		형명 배열변수이름[]
		베열변수이름 = new 형명[요소개수];
		하나의 배열에 확보되는 하나하나의 위치를 요소라 한다.
		배열요소의 수만큼만 값을 저장할 수 있다.
		배열의 선언과 요소의 확보는 함께 기입 가능하다.
		자료형 배열변수이름[] = new 자료형[요소개수];
		예를 들어 int형의 값을 5개 저장할 배열을 준비하려면
		int a[];
		a = new int[5];
		== int a[] = new int[5];
		위 배열의 선언과 요소의 확보를 별도로 했을경우
		아래는 요소의 선언과 배열의 확보를 한 라인에 한 경우다.
		배열 선언의 다른 방법
		자료형[] 배열변수이름; 
		어떤 형식이라도 배열의 선언엔 차이가 없다.
		int []a == int[] a == int a[] 모두같다.
		*/
		char []mo; 

		mo = new char[2]; 
		mo[0] = 'A'; 
		mo[1] = 'B'; 
		for (int i = 0; i <2; i ++) { 
			System.out.println (mo[i]); 
		} 
		
		/* 참조형 변수의 개념
		배열 변수는 참조형으로 불리는 변수에 기본 데이터 형식을 사용한 변수와는
		약간 처리 방법이 다르다.
		기본 데이터형 변수의 경우, 변수는 값을 저장하는 용기 자체다.
		따라서 변수와 변수에 저장되는 값은 동일하게 취급할 수 있다.
		이에 대해 배열과 같은 참조형의 변수에 값을 저장하는 용기는 별도로 
		준비되어있다.
		그리고 참조형 변수에는 용기의 위치가 저장된다.
		배열을 선언하면
		int n[];
		배열 변수는 용기의 위치가 포함되지만 선언한 것만으로는 용기가 준비되어
		있지 않다. 따라서 이 시점에서 null이라는 특별한 값이 배열 변수에 저장
		되어있다. null은 이처럼 참조형 변수에 여전히 적절한 값이 포함되지 않는
		것을 나타내기 위해 준비된 정수다.
		다음 new 연산자를 사용하여 필요한 수의 요소를 확보합니다.
		int n[]; 
		n = new int[5]; 
		new 연산자를 사용하여 5 개의 값을 저장할 수 있는 장소가 확보되는 동시에 확보된 
		장소의 선두 위치 위치 배열 변수에 할당됩니다. 
		이 시점에서 처음 배열 변수는 유효한 값을 가지게됩니다.
		이와 같이 배열 변수 자체는 어디 까지나 어딘가에 확보 된 장소의 위치만을 포함하고 
		있습니다. 
		배열에 값을 저장하고 값을 분리 할 경우는 배열 변수 자체가 아니라 
		배열의 각 요소에 대해 수행할 수 있습니다. 
		참조형으로 나오는 장소의 위치 개념은 C 나 C++ 등의 주소와 비슷하지만 
		C의 포인터처럼 직접 조작할 수는 없습니다.
		 참조형 변수의 값을 대입
		참조 형의 변수에 어딘가에 확보 된 장소의 위치가 할당되어 있지만, 
		별도로 준비한 참조 형의 변수에 할당 할 수 있습니다.
		int n [] = new int [3]; 
		int m []; 
		m = n;
		배열 변수 m배열 변수 n을 대입하고 있습니다. 
		이 결과 두 배열 변수도 같은 장소의 위치를​​ 가지게됩니다. 
		따라서 두 배열 변수를 사용해도 같은 요소에 대해 작업할 수 있습니다.
		일반 변수의 경우에는 원래 변수의 값이 복제되어 할당 대상 변수에 저장되지만, 
		배열에서 다른 배열에 복사 한 경우, 원래의 배열이 가지고 있던 요소가 
		복제된다는 의미가 아니라 !
		똑같은 요소에 대해 두 배열을 변수를 사용하여 액세스할 수 있습니다.
		*/
		int n []; 
		int m []; 
		n = new int [2]; 
		System.out.println (n); 
		n [0] = 10; 
		m = n; 
		System.out.println (m); 
		System.out.println ( "n [0] = "+ n [0]); 
		System.out.println ( "m [0] = "+ m [0]); 
		/*
		 이번에는 요소를 확보 한 후 배열 변수의 값을 화면에 출력시켜 보았습니다. 
		이 값 자체는 사용할 수있는 것은 아닙니다. 
		또 다른 배열 변수를 준비하고 대입하고 있습니다. 
		두 배열 변수에도 같은 요소의 위치를​​ 가지고 있기 때문에, 
		어느 배열 변수를 사용해도 같은 요소를 참조할 수 있습니다.		 
		 */
		 
		/*	요소에 값을 대입과 참조
		 배열은 여러값을 저장할 위치를 관리 가능하고 그 하나 하나를 요소라 한다.
		 요소는 일반 변수처럼 값을 저장하는 용기이며, 직접 값을 대입하고 검색할
		 수 있다.
		 배열 변수 [인덱스] i[2]
		 배열 변수와 [] 사이에 인덱스(첨자)라는 정수를 작성하여 특정 요소를
		 나타낼 수 있다.
		 배열은 여러 요소를 가질 수 있어서 몇 번째 요소인지를 특정하는 것이 
		 인덱스로 지정되는 수치라고 보면된다.
		    부정한 인덱스
		 인덱스를 지정하는 경우 그 대상이 되는 배열에서 확보된 요소 수의 범위 내에
		 있어야한다. 요수수를 5개밖에 확보 안했는데 인덱스에 6 이상의 수치를 지정하면
		 런타임 오류가 발생
		    인덱스를 변수로 지정
		 인덱스에 지정된 값은 정수이므로 수치를 직접 작성하는 것 외에 정수 변수를 
		 지정할 수도 있다.
		 변수를 사용하여 인덱스를 지정할 수 있는 것으로 루프와 배열의 조합하여
		 효율적으로 배열의 각 요소를 처리 가능하다.
		 */
		
		/* 배열의 길이
		배열에서 확보된 요소의 수를 취득하고 싶은 경우
		요소 수는 배열의 길이라고도 하지만 다음의 형식으로 취득 가능하다.
		배열변수명.length
		length는 필드가 아닌 특수 구문이다.
		int n[] = {18,23,45,66}
		System.out.println(n.length);
		배열 요소가 4개 확보되어있어서 화면에 4로 표시된다.
		배열의 길이는 배열과 루프를 함께 자주 사용된다. 
		배열의 모든 요소를 순서대로 처리하고 싶을때, 요소 수만큼 루프 횟수를 결정
		int n[] = {18,23,45,66}
		for(int i = 0; i <n.length; i++){
			System.out.println(n[i]);
		}
		배열변수.length를 루프 횟수를 결정한다.
		수치를 직접 작성하는 것보다 length를 사용하면 수정이 필요 없다.
		*/
		
		/* 다차원 배열
		배열은 여러 값을 한꺼번에 관리 할 수 있어 편리하며
		배열의 각 요소에 대입하는 값으로 다른 배열을 사용할 수 있다.
		int korean[] = {80,92,45};
		int math[]	 = {75,89,54};
		   다차원 배열의 요소의 확보
		다차원 배열도 배열과 큰 차이가 없다. 형식은
		자료형 배열변수이름[][]
		배열변수명 = new 자료형[요소수][];
		int arr[][];
		arr = new int[][];
		*/
	
	int count1[][];
	count1 = new int[2][];
	
	int ko1[];
	ko1 = new int[3];
	ko1[0] = 80;
	ko1[1] = 92;
	ko1[2] = 45;
	
	int san1[];
	san1 = new int[3];
	san1[0] = 75;
	san1[1] = 89;
	san1[2] = 54;
	
	count1[0] = ko1;
	count1[1] = san1;
	for (int i = 0; i < count1.length; i++) {
		for (int j = 0; j < count1[0].length; j++) {
			System.out.println(count1[i][j]);
		}
	}
	//다차원 값으로 대입하는 배열을 따로 만들지 않아도 다음과 같이 작성 가능
	int count2[][];
	count2 = new int[2][];
	
	count2[0] = new int[3];
	count2[1] = new int[3];
	
	count2[0][0] = 80;
	count2[0][1] = 92;
	count2[0][2] = 45;
	count2[1][0] = 75;
	count2[1][1] = 89;
	count2[1][2] = 54;
	for (int i = 0; i < count2.length; i++) {
		for (int j = 0; j < count2[0].length; j++) {
			System.out.println(count2
					[i][j]);
		}
	}
	/*
	자료형 배열변수이름[][]
	배열변수명 = new 자료형[요소수][값배열의 요소수]
	일반 배열 선언과 요소의 확보는 함께 
	자료형 배열변수이름[][] = new 자료형[요소수][값배열의 요소수]
	*/
	int count3[][] = new int[2][3];
	
	count3[0][0] = 80;
	count3[0][1] = 92;
	count3[0][2] = 45;
	count3[1][0] = 75;
	count3[1][1] = 89;
	count3[1][2] = 54;
	/*
	다차원 배열은 배열을 값으로 가지는 것과 같은 배열이며, 여러 변수를 사용하여
	반복과 함께 많은 값을 한꺼번에 처리 할 수 있다.
	또한 이번 다차원 배열은 2차원 배열이었지만, 2차원 배열을 값으로 가지는 것과
	같은 3차원 배열 등 몇 차원까지도 만들 수는 있다.
	*/
	
	/* 다차원 배열의 초기화
	배열의 각 요소에 초기 값을 설정하는 형식
	자료형 배열변수이름[] = {값,값2,...};
	다차원 배열의 경우는 요소에 대입되는 값이 다른 배열이 되서 형식은
	자료형 배열변수이름1[] = {값,값2,...};
	자료형 배열변수이름2[] = {값,값2,...};
	자료형 배열변수이름[][] = {배열변수명1 배열변수명2};
	별도 생성된 배열값과 같이 기술
	자료형 배열변수이름[][] = {{값1-1 값1-2..}, {값2-1 값2-2..}};
		다차원 배열의 길이
	다차원 배열의 경우도 "배열변수명.length"에서 배열의 길이를 얻을 수 있다.
	  배열변수명.length
	int num[][] = {{1,3,5},{2,4,6}};
	System.out.println(num.length);
	이 경우는 2가 출력
	  배열변수이름[인덱스].length 
	int num[][] = {{1,3,5},{2,4,6}};
	System.out.println(num[0].length);
	System.out.println(num[1].length);
	이 경우는 3이 두번 출력
	*/
	}
}
