package day01;
// 자바의 이름짓는 규칙들
// 1. 자바는 대소문자 구분을 엄격하게 한다.a
// 2. 같은 유효범위(scope)에서는 같은 이름을 쓸 수 없다.
// 3. 자바가 미리 쓰기로한 36가지의 예약어가 있다.
//    해당 단어들로는 이름을 만들어 줄 수 없다.
//    그러니까 외우세요. -> 옛날 옛적 이야기.....
//    이제는 해당 단어들을 이클립스가 보라색으로 표시해준다.
// 4. 자바는 낙타등 표기법(Camel back notation)을 권장한다.
//    낙타등 표기법이란, 여러 단어로 이루어질 경우
//    두번째 단어부터는 첫글자를 대문자로 적어주는 방법이다.
// 클래스 이름 짓기
// 1. 클래스는 대문자로 시작하는 명사이다.
// 2. 예전에는 단어를 줄여서 쓰는 경우가 있었지만
//    이제는 단어를 줄여쓰지 않는다.
// 변수 이름 짓기
// 1. 변수는 소문자로 시작하는 명사이다.
// 2. 클래스와 마찬가지로 더이상 줄여쓰지 않는다.
// 상수 이름 짓기
// 1. 상수는 모든 글자를 대문자로 적어준다.
// 2. 따라서, 낙타등 표기법이 적용될 수 없기 때문에
//    여러 단어일 경우에는 단어의 사이에 _를 넣어준다.
// 메소드 이름 짓기
// 1. 메소드는 소문자로 시작하는 동사이다.
// 2. 메소드는 뒤에는 항상 ()가 붙는다.

// 클래스란?
// 우리가 만드는 클래스 하나하나가 작은 미니 프로그램이 된다.
// 우리가 필요할때마다 클래스의 변수를 만들어서 기능을 실행할 수 있다.
// 그 클래스 변수를 우리는 객체(object)라고 부른다.

// 변수란?
// 그 안의 내용이 변하는 공간.
// 단 그 공간이 어떤 값을 담을지를 정해주어야 한다.

// 상수란?
// 그 안의 내용이 한번 정해지면 바뀌지 않는 공간.
// 변수와 마찬가지로 어떤 값이 담길 수 있는지를 정해 주어야 한다.

// 메소드란?
// 그 클래스에 정의되어있는 기능으로써,
// 우리가 특정 기능이 필요하면 그 클래스 변수를 만들어서
// 호출 할 수 있다.
public class Ex01 {
 public static void main(String[] args) {
	 //변수의 선언과 초기화
	 //변수는 해당 공간에 어떤 값이 들어가는지를 정해주어야 한다.
	 //어떤 값이 들어가는지는 해당 변수 이름 앞에
	 //자료형을 붙여서 정해주게 된다.
	 //자료형에는 두가지가 있다.
	 //1. 기본형: 해당 공간에 이진법으로 변환된 값이 들어갑니다. -> 스택 영역
	 //   기본형에는 모두 8가지의 자료형이 있다.
	 //   정수형: byte  short  int   long
	 //         8비트     16비트    32비트   64비트
	 //   비트란? 2진법 자리 하나를 비트라고 한다.
	 //   그렇다면 8비트는? 8자리 2진법 숫자
	 //   즉 byte는 2의 8승개의 숫자를 가질 수 있다.
	 //   하지만 컴퓨터에서 제일 앞자리는 0이면 +, 1이면 -가 된다.
	 //   즉 -2의7승~+2의7승-1이 byte의 범위가 된다.
	 //   하지만 예전과는 달리 이제 메모리가 여유가 있기 때문에
	 //   우리가 정수를 입력하면 자바에서는 자동으로 int로 인식을 하게 된다.
	 
	 //   실수형: float double
	 //   float과 double 중에서 double이 기본적으로 자바가 인식하는
	 //   실수의 자료형이 된다.
	 
	 //   문자형: char
	 //   character라는 문자의 뜻을 가진 영어단어를 줄여서 char 라고 쓴다.
	 //   'A','b','0' 이런식으로 '' 안에 글자가 하나 들어선다.
	 //   char의 경우, ascii 테이블이라는 문자 테이블값에 따라서 글자가 할당된다.
	 
	 //   논리형: boolean
	 //   논리형의 경우에는 true/false 2가지 값만 들어간다.
	 
	 //2. 참조형: 해당 공간에 그 값이 있는 곳의 주소가 들어갑니다. -> 힙 영역
	 //   참조형에는 크게 3가지 종류가 있다.
	 //   클래스형, 인터페이스형, 배열형
	 
	 // 변수를 선언하기
	 // 자료형 변수이름
	 // 그럼 우리가 직접 int 형의 변수 number를 만들어봅시다/
	 int number; 	
	 // 이렇게 만든 int 변수 number에는 우리가 int에 해당하는 값을
	 // 넣어줄 수 있다.
	 // 이렇게 값을 넣어주는 것을 초기화 라고 한다.
	 number = 3000;
	 
	 // 형변환과 overflow, underflow
	 // 형변환(typecasting)이란, 
	 // 데이터를 내가 필요한 형태로 바꾸는 것을 형변환이라고 한다.
	 // 형변환에는 암시적 형변환(implicit typecasting)
	 // 그리고 명시적 형변환(explicit typecasting)
	 // 암시적 형변환은 우리가 모르는 사이에 활발하게 일어난다.
	 // 예를 들어보자
	 // 만약 우리가 byte에 작은 숫자를 넣는다고 하면?
	 // 자바는 처음 우리가 입력한 숫자를 int로 인식하지만
	 // 알아서 자동으로 byte로 형변환해준다.
	 byte myByte = 10;
	 // 또는 더 작은 데이터타입의 값을 더 큰 데이터타입의 공간으로
	 // 초기화해줄때에도 이러한 암시적 형변환이 일어난다.
	 number = myByte;
	 
	 // 명시적 형변환
	 // 명시적 형변환은 더 큰 데이터타입의 값을 더 작은 데이터타입에 넣을때
	 // 실행한다.
	 
	 // 명시적으로 우리가 이 데이터타입으로 바꿔라 하고 코드를 적어주어야 한다.
	 // 명시적 형변환 하는 방법: 바꿀 값 앞에 (바꿀 데이터타입) 을 적어주면 된다.
	 // 예시
	 myByte = (byte)number;
	 
	 // 명시적 형변환이 필요한 이유는 우리가 자료형을 바꿔주어야 할 때가 많기 때문이다.
	 // 하지만 한가지 주의해야할 것은
	 // 만약 형변환을 통해서 바꿔진 값이, 우리가 초기화하는 변수의 자료형의 범위를
	 // 넘어서면?
	 // 최대범위를 넘어서면 overflow가 발생하고
	 // 최소범위를 넘어서면 underflow가 발생한다.
	 
	 // 일단 바이트의 형태를 알아보자
	 // 0: 0000 0000
	 // 그러면 바이트의 최대값은?
	 // 0111 1111 -> +127(십진법으로 환산한 수)
	 // 그러면 바이트의 최소값은?
	 // 1000 0000 -> -128
	 
	 // 컴퓨터는 숫자체계는 맨 앞자리가 부호를 담당하기 때문에
	 // -최소값 - 0 - 최대값 의 형태가 아니라
	 // 0~최대값~최소값 ~-1 의
	 // 모양이 된다.
	 
	 // 그렇다면 byte 값 127에 1을 더하면...?
	 
	 //      99
	 //    +  1
	 //    ----
	 //     100
	 
	 //   0111 1111
	 //  +        1
	 // ------------
	 //  1000 0000  -> -128 (십진법)
	 // 이렇게 최대값의 범위를 벗어나서 -로 가는 것을 overflow라고 한다.
	 
	 // 반대로 -128 - 1 을 하면?
	 //   1000 0000
	 //  -        1
	 // ------------
	 //   0111 1111 -> +127
	 // 이렇게 최소값의 범위를 벗어나서 +로 가는 것을 underflow라고 한다.
	 
	 // 자바는 기본적으로 overflow 혹은 underflow가 발생할 가능성이 보이면
	 // 에러를 발생시킨다.
	 // 하지만 그 에러로 명시적 형변환으로 무시할 수 있다/
	 // 그럼 우리가 직접 overflow와 underflow를 경험해보자
	 
	 myByte = (byte)130;
	 System.out.println(myByte);
	 
	 myByte = (byte)-135;
	 System.out.println(myByte);
	 
	 //실수
	 //실수형의 경우 기본적으로 double로 인식이 된다.
	 double myDouble = 3.141592;
	 System.out.println(myDouble);
	 
	 //흔히들 작은 자릿수는 float으로, 큰 자릿수는 double로 하라고 말을 하지만
	 //실제로는 자바에서는 모든 실수를 double로 처리하기 때문에
	 //우리가 float에 실수를 아무런 말없이 넣으면?
	 //에러가 난다.
	 //그렇다면 우리가 float을 써야만 하는 상황(극히 없음) 이 오면?
	 //1. 명시적 형변환
	 //2. "야 이 실수는 float이야!" 하고 자바에게 알려주거나
	 //2가지 방법이 가능하다.
	 
	 //1. 명시적 형변환
	 float myFloat = (float)3.141;
	 System.out.println(myFloat);
	 //2. 이 실수가 float이라는 것을 자바에게 알려주는 방법 (뒤에 f 붙임)
	 myFloat = 6.02f;
	 System.out.println(myFloat);
	 
	 // 문자형
	 // 문자형의 경우 표의 형태로 숫자값 얼마면 문자 어떤거 라고 적혀있다.
	 // 따라서 아래의 코드가 가능하다.
	 
	 // 문자를 직접 넣기 cf (char)뒤에 숫자만 들어간 경우 ascii코드
	 char myChar = 'A';
	 System.out.println(myChar);
	 myChar = (char)97;
	 System.out.println(myChar);
	 myChar = (char)65;
	 System.out.println(myChar);
	 
	 // 논리형 
	 // 논리형의 경우 true 혹은 false 2가지 값만 존재한다.
	 boolean isTrue = true;
	 boolean isFalse = false;
	 System.out.println(isTrue);
	 System.out.println(isFalse);
   }
}